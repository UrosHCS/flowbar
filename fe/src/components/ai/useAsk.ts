import { StreamHandler } from './StreamHandler';
import { useState } from 'react';
import { config } from '@/config/config';
import { Session } from '@supabase/supabase-js';

export const useAsk = (session: Session) => {
  /**
   * True when the answer is being generated.
   */
  const [isLoading, setIsLoading] = useState(false);

  const token = session.access_token;

  /**
   * The answer being generated by the AI.
   */
  const [streamingMessage, setStreamingMessage] = useState('');

  async function ask(prompt: string): Promise<void> {
    setIsLoading(true);

    const stream = await getResponseStream(prompt, token);

    if (!stream) {
      setIsLoading(false);
      return;
    }

    const { message } = await new StreamHandler(stream, (chunk) =>
      setStreamingMessage((prev) => prev + chunk),
    ).read();

    console.log(message);

    setIsLoading(false);
  }

  return { ask, streamingMessage, isLoading };
};

async function getResponseStream(
  prompt: string,
  token: string,
): Promise<ReadableStreamDefaultReader<Uint8Array> | undefined> {
  try {
    const res = await fetch(`${config.api.baseUrl}/ask`, {
      method: 'POST',
      body: JSON.stringify({ prompt }),
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${token}`,
      },
    });

    if (!res.ok) {
      console.error(`res text: ${await res.text()}`);
      return;
    }

    if (!res.body) {
      console.error('No body in response');
      return;
    }

    return res.body.getReader();
  } catch (error) {
    console.error(error);
  }
}
